// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, PriceQuoteItemList, YahooQuotes, async, get_split, get_split_return, get_splits_returns_table, get_tables, insert_dividends, insert_splits_returns, invalid_rec_list_prices, isNumber, make_error, roundNumber,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  async = require('async');

  YahooQuotes = require('yahoo_quotes');

  PriceQuoteItemList = (function(_super) {
    __extends(PriceQuoteItemList, _super);

    function PriceQuoteItemList(ticker, iso_start_date, iso_end_date) {
      var self;
      this.ticker = ticker;
      this.iso_start_date = iso_start_date;
      this.iso_end_date = iso_end_date;
      self = this;
      async.series({
        price_quotes: function(callback) {
          var yq;
          yq = new YahooQuotes(self.ticker, self.iso_start_date, self.iso_end_date, "prices");
          yq.on('error', function(err) {
            return callback(err);
          });
          yq.on('data', function(yahoo_rec_list) {
            return callback(null, yahoo_rec_list);
          });
        },
        dividends: function(callback) {
          var yq;
          yq = new YahooQuotes(self.ticker, self.iso_start_date, self.iso_end_date, "dividends");
          yq.on('error', function(err) {
            return callback(err);
          });
          yq.on('data', function(yahoo_rec_list) {
            return callback(null, yahoo_rec_list);
          });
        }
      }, function(err, results) {
        var pq_item_list;
        if (err) {
          self.emit('error', err, null);
        } else if (invalid_rec_list_prices(results.price_quotes)) {
          err = make_error("invalid_price_quotes", "invalid price quotes");
          self.emit('error', err, null);
        } else {
          pq_item_list = insert_dividends(results.price_quotes, results.dividends);
          pq_item_list = insert_splits_returns(pq_item_list);
          pq_item_list.sort(function(a, b) {
            if (a.iso_date > b.iso_date) {
              return 1;
            } else {
              return -1;
            }
          });
          self.emit('data', null, pq_item_list);
        }
      });
    }

    return PriceQuoteItemList;

  })(EventEmitter);

  make_error = function(err, msg) {
    var e;
    e = new Error(msg);
    e.code = err;
    return e;
  };

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  roundNumber = function(number, precision) {
    return Number(number.toFixed(precision));
  };

  invalid_rec_list_prices = function(rec_list_prices) {
    var date_array, price_quote;
    if ((rec_list_prices == null) || rec_list_prices.length === 0) {
      return true;
    }
    price_quote = rec_list_prices[0];
    if (!price_quote.iso_date) {
      return true;
    }
    date_array = price_quote.iso_date.split("-");
    if (date_array.length !== 3) {
      return true;
    }
    if (!price_quote.volume) {
      return true;
    }
    if (!isNumber(price_quote.volume)) {
      return true;
    }
    return false;
  };

  insert_dividends = function(rec_list_prices, rec_list_dividends) {
    var d, dtable, p, _i, _j, _len, _len1;
    if (rec_list_dividends.length === 0) {
      return rec_list_prices;
    }
    dtable = {};
    for (_i = 0, _len = rec_list_dividends.length; _i < _len; _i++) {
      d = rec_list_dividends[_i];
      dtable[d.iso_date] = d.dividend;
    }
    for (_j = 0, _len1 = rec_list_prices.length; _j < _len1; _j++) {
      p = rec_list_prices[_j];
      if (dtable[p.iso_date] != null) {
        p.dividend = dtable[p.iso_date];
      }
    }
    return rec_list_prices;
  };

  insert_splits_returns = function(pq_item_list) {
    var pqi, sr, sr_table, _i, _len;
    sr_table = get_splits_returns_table(pq_item_list);
    for (_i = 0, _len = pq_item_list.length; _i < _len; _i++) {
      pqi = pq_item_list[_i];
      sr = sr_table[pqi.iso_date];
      if (sr == null) {
        continue;
      }
      if (sr.percent_return != null) {
        pqi.percent_return = sr.percent_return;
      }
      if (sr.split != null) {
        pqi.split = sr.split;
      }
    }
    return pq_item_list;
  };

  get_splits_returns_table = function(pq_item_list) {
    var adj_close, adj_close_table, close_price, close_price_table, dividend, dividend_table, id, iso_date, iso_dates_list, o, prior_adj_close, prior_close_price, sr_table, _i, _len;
    sr_table = {};
    o = get_tables(pq_item_list);
    dividend_table = o.dividend_table;
    close_price_table = o.close_price_table;
    adj_close_table = o.adj_close_table;
    iso_dates_list = (function() {
      var _results;
      _results = [];
      for (iso_date in close_price_table) {
        _results.push(iso_date);
      }
      return _results;
    })();
    if (iso_dates_list.length === 0) {
      throw new Error("empty iso_dates_list");
    }
    iso_dates_list.sort();
    id = iso_dates_list.shift();
    prior_adj_close = adj_close_table[id];
    prior_close_price = close_price_table[id];
    for (_i = 0, _len = iso_dates_list.length; _i < _len; _i++) {
      id = iso_dates_list[_i];
      dividend = dividend_table[id];
      adj_close = adj_close_table[id];
      close_price = close_price_table[id];
      if (dividend == null) {
        dividend = 0;
      }
      o = {
        dividend: dividend,
        adj_close: adj_close,
        close_price: close_price,
        prior_adj_close: prior_adj_close,
        prior_close_price: prior_close_price
      };
      sr_table[id] = get_split_return(o);
      prior_adj_close = adj_close;
      prior_close_price = close_price;
    }
    return sr_table;
  };

  get_tables = function(pq_item_list) {
    var adj_close_table, close_price_table, dividend_table, o, pqi, _i, _len;
    close_price_table = {};
    dividend_table = {};
    adj_close_table = {};
    for (_i = 0, _len = pq_item_list.length; _i < _len; _i++) {
      pqi = pq_item_list[_i];
      close_price_table[pqi.iso_date] = pqi.close_price;
      adj_close_table[pqi.iso_date] = pqi.adj_close;
      if (pqi.dividend != null) {
        dividend_table[pqi.iso_date] = pqi.dividend;
      }
    }
    o = {
      close_price_table: close_price_table,
      dividend_table: dividend_table,
      adj_close_table: adj_close_table
    };
    return o;
  };

  get_split_return = function(o) {
    var diff, percent_return, percent_return_in_theory, split;
    if ((o.prior_adj_close <= 0) || (o.prior_close_price <= 0)) {
      return {
        split: null,
        "return": null
      };
    }
    percent_return = ((o.adj_close / o.prior_adj_close) - 1.0) * 100.0;
    percent_return_in_theory = (((o.close_price + o.dividend) / o.prior_close_price) - 1.0) * 100.0;
    diff = Math.abs(percent_return - percent_return_in_theory);
    split = diff > 0.02 ? get_split(o) : null;
    percent_return = roundNumber(percent_return, 4);
    return {
      split: split,
      percent_return: percent_return
    };
  };

  get_split = function(o) {
    var split;
    split = (o.prior_close_price * o.adj_close / o.prior_adj_close) - (o.close_price + o.dividend);
    return roundNumber(split, 2);
  };

  module.exports = PriceQuoteItemList;

}).call(this);
